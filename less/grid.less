/* Grid Specific Mixins
 * ----------------------------------------------------------------- */

#grid {
	.unit (@span, @total) {
	   width: (100% / @total) * @span;
	   margin: 0;
	}
	
	/**
	* Determine width and margin for grid unit with spacing
	*
	* @param (integer)span           the column span of the grid unit                                          required
	* @param (integer)total          the total number of columns in the grid row                               required
	* @param (pixels)spacing         the ammount of spacing required between grid units                        required
	* @param (integer)parentSpan     the column span of the parent grid unit, used for nested grids            optional
	* @param (integer)parentTotal    the total number of columns in the parent grid unit's grid row            optional
	* @param (pixels)parentSpacing   the ammount of spacing between grid units in the parent unit's grid row   optional
	*
	* The width of the grid unit is a percentage value, and the margin is in pixels.
	* We therefore need to first calculate the margin as a percentage of the parent
	* grid row and compensate in the width percentage value of each grid unit.
	*/
	.unitWithSpacing (@span, @total, @spacing, @parentSpan: 1, @parentTotal: 1, @parentSpacing: 0px) {
	   
	   /* Calculate the width of the parent element, in pixels
	   ====================================================== */
	   /**
	   * Get the parent width percentage.
	   * Uses exactly the same logic as the section below ("Calculate the width
	   * of the grid unit, in percentage"), just concatinated.
	   */
	   @parentWidthPercentage: ((100% / @parentTotal) * @parentSpan) - ((((1% * ((@parentSpacing / @siteWidth) * 100)) * (@parentTotal - 1)) / @parentTotal) / @parentSpan);
	   
	   /**
	   * Calculate the parent element width in pixels
	   */
	   @parentWidth: (@siteWidth / 100) * @parentWidthPercentage;
	   
	   
	   
	   /* Calculate the width of the grid unit, in percentage
       ====================================================== */
	   /**
	   * Calculate the spacing width as a percentage of the parent width.
	   * There is no LESS function to change a variable from pixels to percentage,
	   * so we just multiply 1% by the percentage value in pixels (math hack)
	   */
	   @spacingPercentage: 1% * ((@spacing / @parentWidth) * 100);
	   
	   /**
	   * Calculate the base width (as if there were no spacing)
	   */
	   @baseWidth: (100% / @total) * @span;
	   
	   /**
	   * As we are using margin-right, the number of units with spacing should be
	   * one less than the total number of units
	   */
	   @unitsWithSpacing: @total - 1;
	   
	   /**
	   * Calculate the proporsion of the grid row consumed by spacing (percentage)
	   */
	   @totalRowSpacing: @spacingPercentage * @unitsWithSpacing;
	   
	   /**
	   * To calculate how much width to subtract from each one of the units with
	   * spacing, we take the total ammount of spacing in the grid row, divide it
	   * by the total number of columns, then divide that by the the number of columns
	   * that the unit in question consumes :)
	   */
	   @widthToSubtract: (@totalRowSpacing / @total) / @span;
	   
	   /* Set the CSS properties */
	   width: (@baseWidth - @widthToSubtract);
	   margin-right: @spacing;
	}
}

.fixed-container {
  width: @siteWidth;
  margin: 0 auto;
  .clearfixHack();
}

/* Grid System
 * ----------------------------------------------------------------- */

/*
*   This grid system is retro-compatiable with the old one, but the
*   old one must not be used in new projects.
*/

// Grid Row
.gr, .line {
    width: 100%;
    .clearfixHack();
}

// Grid Units
/**
* NOTE: When ready to remove IE6/7 support, all selectors beginning with .grs
* can be removed, and add direct decendant indicators (>) to the grid units
* contained within the spaced grid row containers declared after these rules
*/
.gu, .gridUnit {
    float: left;
}
.gu-1of1, .grid1of1 { #grid > .unit(1, 1); }
.gu-1of2, .grid1of2, .gu-2of4, .grid2of4 { #grid > .unit(1, 2); }
.gu-1of3, .grid1of3 { #grid > .unit(1, 3); }
.gu-2of3, .grid2of3 { #grid > .unit(2, 3); }
.gu-1of4, .grid1of4 { #grid > .unit(1, 4); }
.gu-3of4, .grid3of4 { #grid > .unit(3, 4); }
.gu-1of5, .grid1of5 { #grid > .unit(1, 5); }
.gu-2of5, .grid2of5 { #grid > .unit(2, 5); }
.gu-3of5, .grid3of5 { #grid > .unit(3, 5); }
.gu-4of5, .grid4of5 { #grid > .unit(4, 5); }

.gu-last, .gridLastUnit {
    zoom: 1;
    display: table-cell;
    *display: block;
    float: none;
    width: 2000px;
    *width: auto;
    _position: relative;
    _left: -3px;
    _margin-right: -3px;
}

.grsxs {
    > .gu-1of2, > .gu-2of4, > .grid1of2, > .grid2of4 { #grid > .unitWithSpacing(1, 2, @spacingXs); }
    > .gu-1of3, > .grid1of3 { #grid > .unitWithSpacing(1, 3, @spacingXs); }
    > .gu-2of3, > .grid2of2 { #grid > .unitWithSpacing(2, 3, @spacingXs); }
    > .gu-1of4, > .grid1of4 { #grid > .unitWithSpacing(1, 4, @spacingXs); }
    > .gu-3of4, > .grid3of4 { #grid > .unitWithSpacing(3, 4, @spacingXs); }
    > .gu-1of5, > .grid1of5 { #grid > .unitWithSpacing(1, 5, @spacingXs); }
    > .gu-2of5, > .grid2of5 { #grid > .unitWithSpacing(2, 5, @spacingXs); }
    > .gu-3of5, > .grid3of5 { #grid > .unitWithSpacing(3, 5, @spacingXs); }
    > .gu-4of5, > .grid4of5 { #grid > .unitWithSpacing(4, 5, @spacingXs); }
}
.grss {
    > .gu-1of2, > .gu-2of4, > .grid1of2, > .grid2of4 { #grid > .unitWithSpacing(1, 2, @spacingS); }
    > .gu-1of3, > .grid1of3 { #grid > .unitWithSpacing(1, 3, @spacingS); }
    > .gu-2of3, > .grid2of3 { #grid > .unitWithSpacing(2, 3, @spacingS); }
    > .gu-1of4, > .grid1of4 { #grid > .unitWithSpacing(1, 4, @spacingS); }
    > .gu-3of4, > .grid3of4 { #grid > .unitWithSpacing(3, 4, @spacingS); }
    > .gu-1of5, > .grid1of5 { #grid > .unitWithSpacing(1, 5, @spacingS); }
    > .gu-2of5, > .grid2of5 { #grid > .unitWithSpacing(2, 5, @spacingS); }
    > .gu-3of5, > .grid3of5 { #grid > .unitWithSpacing(3, 5, @spacingS); }
    > .gu-4of5, > .grid4of5 { #grid > .unitWithSpacing(4, 5, @spacingS); }
}
.grsm {
    > .gu-1of2, > .gu-2of4, > .grid1of2, > .grid2of4 { #grid > .unitWithSpacing(1, 2, @spacingM); }
    > .gu-1of3, > .grid1of3 { #grid > .unitWithSpacing(1, 3, @spacingM); }
    > .gu-2of3, > .grid2of3 { #grid > .unitWithSpacing(2, 3, @spacingM); }
    > .gu-1of4, > .grid1of4 { #grid > .unitWithSpacing(1, 4, @spacingM); }
    > .gu-3of4, > .grid3of4 { #grid > .unitWithSpacing(3, 4, @spacingM); }
    > .gu-1of5, > .grid1of5 { #grid > .unitWithSpacing(1, 5, @spacingM); }
    > .gu-2of5, > .grid2of5 { #grid > .unitWithSpacing(2, 5, @spacingM); }
    > .gu-3of5, > .grid3of5 { #grid > .unitWithSpacing(3, 5, @spacingM); }
    > .gu-4of5, > .grid4of5 { #grid > .unitWithSpacing(4, 5, @spacingM); }
}
.grsl {
    > .gu-1of2, > .gu-2of4, > .grid1of2, > .grid2of4 { #grid > .unitWithSpacing(1, 2, @spacingL); }
    > .gu-1of3, > .grid1of3 { #grid > .unitWithSpacing(1, 3, @spacingL); }
    > .gu-2of3, > .grid2of3 { #grid > .unitWithSpacing(2, 3, @spacingL); }
    > .gu-1of4, > .grid1of4 { #grid > .unitWithSpacing(1, 4, @spacingL); }
    > .gu-3of4, > .grid3of4 { #grid > .unitWithSpacing(3, 4, @spacingL); }
    > .gu-1of5, > .grid1of5 { #grid > .unitWithSpacing(1, 5, @spacingL); }
    > .gu-2of5, > .grid2of5 { #grid > .unitWithSpacing(2, 5, @spacingL); }
    > .gu-3of5, > .grid3of5 { #grid > .unitWithSpacing(3, 5, @spacingL); }
    > .gu-4of5, > .grid4of5 { #grid > .unitWithSpacing(4, 5, @spacingL); }
}
.grsxl {
    > .gu-1of2, > .gu-2of4, > .grid1of2, > .grid2of4 { #grid > .unitWithSpacing(1, 2, @spacingXl); }
    > .gu-1of3 { #grid > .unitWithSpacing(1, 3, @spacingXl); }
    > .gu-2of3 { #grid > .unitWithSpacing(2, 3, @spacingXl); }
    > .gu-1of4 { #grid > .unitWithSpacing(1, 4, @spacingXl); }
    > .gu-3of4 { #grid > .unitWithSpacing(3, 4, @spacingXl); }
    > .gu-1of5 { #grid > .unitWithSpacing(1, 5, @spacingXl); }
    > .gu-2of5 { #grid > .unitWithSpacing(2, 5, @spacingXl); }
    > .gu-3of5 { #grid > .unitWithSpacing(3, 5, @spacingXl); }
    > .gu-4of5 { #grid > .unitWithSpacing(4, 5, @spacingXl); }
}

// Zebra grid guide for "visual debugging" (to be used in conjunction with .grid-row)
.gr-zebra {
    .gu, .gridUnit {
		text-align: center;
		padding: @spacingS 0;
		*background-color: lighten(@black, 90%);
		
		&:nth-child(even) { background-color: lighten(@black, 90%); }
		&:nth-child(odd) { background-color: lighten(@black, 95%); }
    }
}